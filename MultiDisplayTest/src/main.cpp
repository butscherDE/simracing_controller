/*********
  Rui Santos
  Complete project details at https://RandomNerdTutorials.com/tca9548a-i2c-multiplexer-esp32-esp8266-arduino/
  
  Permission is hereby granted, free of charge, to any person obtaining a copy
  of this software and associated documentation files.
  
  The above copyright notice and this permission notice shall be included in all
  copies or substantial portions of the Software.
*********/

#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

static const uint8_t image_data_Image[1024] = {
    // ████████████████████████████████████████████████████∙∙∙█████████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████∙██∙∙∙∙██████████████████████████████████████████████████████████████████████
    // ██████████████████████████████████████████████████∙████∙∙∙∙∙████████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████∙███∙∙∙∙∙∙███████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████∙∙∙∙∙∙∙∙∙∙∙██████████████████████████████████████████████████████████████
    // ████████████████████████████████████████████████████∙██∙∙∙∙∙∙∙∙∙∙∙∙█████████████████████████████████████████████████████████████
    // █████████████████████████████████████████████████∙∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙∙█████████████████████████████████████████████████████████████
    // █████████████████████████████████████████████████∙∙█∙█∙∙∙∙∙∙∙∙∙∙∙∙∙█████████████████████████████████████████████████████████████
    // █████████████████████████████████████████████████∙██████∙█∙∙∙∙∙∙∙∙∙█████████████████████████████████████████████████████████████
    // █████████████████████████████████████████████████████████████∙∙∙∙∙██████████████████████████████████████████████████████████████
    // ████████████████████████████████████████████████████████∙████∙∙█████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████∙█████∙∙█████████████████████████████████████████████████████████████████
    // ███████████████████████████████████████████████████████∙█████∙∙█████████████████████████████████████████████████████████████████
    // ████████████████████████████████████████████████████████∙█████∙██████∙∙∙████████████████████████████████████████████████████████
    // ██████████████████████████████████████████████████████████████████∙██∙∙∙∙███████████████████████████████████████████████████████
    // ██████████████████████████████████████████████████████████████████∙∙███∙█████████∙∙∙████████████████████████████████████████████
    // ███████████████████████████████████████████████████████∙∙∙∙∙██████∙███████████████∙∙∙███████████████████████████████████████████
    // █████████████████████████████████████████████████████∙∙∙∙█████████████████████∙███∙∙∙███████████████████████████████████████████
    // ████████████████████████████████████████████████████∙∙████∙██████∙∙∙∙∙███████∙∙∙██∙∙∙███████████████████████████████████████████
    // ████████████████████████████████████████████████████████∙∙████∙∙∙∙∙∙∙∙∙█████∙∙∙∙██∙∙∙███████████████████████████████████████████
    // █████████████████████████████████████████████████████████████∙∙∙∙∙∙∙∙∙∙∙████∙∙∙∙████████████████████████████████████████████████
    // █████████████████████████████████████████████████████████████∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙∙∙∙█████∙∙█████████████████████████████████████████
    // ██████████████████████████████████████████████████████████████∙∙∙∙∙∙∙∙∙∙∙██∙∙████∙∙██∙∙∙████████████████████████████████████████
    // ██████████████████████████████████████████████████████∙∙∙∙∙∙███∙∙∙∙∙██∙∙∙∙█∙∙███∙∙∙██∙∙∙████████████████████████████████████████
    // █████████████████████████████████████████████████████∙∙∙█∙∙∙∙███∙∙██∙∙∙∙∙██∙███∙∙∙∙██∙∙█████████████████████████████████████████
    // ███████████████████████████████████████████████∙∙∙██∙∙██████∙∙███∙█∙█∙∙∙█∙█∙███∙∙∙∙███∙█████████████████████████████████████████
    // ██████████████████████████████████████████████∙∙∙██∙∙████████∙███∙∙∙∙∙∙█∙∙█∙██∙∙████████████████████████████████████████████████
    // ████████████████████████████████████████████∙∙∙∙███∙█████████∙██∙∙∙∙∙∙∙∙∙∙██∙█∙████∙∙∙∙∙∙∙██████████████████████████████████████
    // ███████████████████████████████████████████∙∙∙∙██∙∙∙█████████∙██∙∙∙∙∙∙∙∙∙█████∙████∙∙∙∙∙∙∙∙█████████████████████████████████████
    // ██████████████████████████████████████∙∙∙∙█∙∙∙███∙∙∙█∙████∙∙∙████∙∙∙∙∙∙∙∙█████∙███∙∙∙∙∙∙∙∙∙█████████████████████████████████████
    // ███████████████████████████████████∙∙∙∙∙∙∙∙██████∙∙██∙██∙██∙∙███∙∙∙∙∙∙████████∙████∙∙∙∙∙∙∙∙∙████████████████████████████████████
    // ██████████████████████████████████∙∙∙∙∙∙∙█∙██∙███∙∙███∙∙██∙∙∙███∙∙∙∙∙█∙∙∙∙∙∙∙███████∙█∙█∙█∙∙████████████████████████████████████
    // █████████████████████████████████∙∙∙∙∙∙∙█∙█∙████∙∙∙█∙█████∙∙∙██∙∙∙∙∙█∙∙∙∙∙∙∙∙∙█████∙∙∙∙∙∙█∙∙████████████████████████████████████
    // █████████████████████████████████∙∙∙∙∙∙██████████∙∙██████∙∙∙∙██∙∙∙∙█∙∙∙∙∙∙∙∙∙∙█████∙∙∙∙∙∙█∙█████████████████████████████████████
    // ████████████████████████████████∙∙∙∙∙∙∙███∙██████∙█∙████∙∙∙∙███∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙███∙∙∙∙∙∙∙█∙█████████████████████████████████████
    // ████████████████████████████████∙∙∙∙∙∙∙████████████∙∙∙∙∙∙∙∙█∙██∙∙██∙∙∙∙∙∙∙∙∙∙∙████∙∙∙∙∙∙∙∙██████████████████████████████████████
    // ████████████████████████████████∙∙∙∙∙∙██████∙∙∙████∙∙∙∙██████∙█∙∙█∙∙∙∙∙∙∙∙∙∙∙∙███∙∙∙∙∙∙∙∙███████████████████████████████████████
    // ████████████████████████████████∙█∙█∙█∙████∙∙∙∙█████∙∙██████∙█████∙█∙∙∙∙∙∙∙∙∙∙██∙∙∙∙∙∙∙∙∙∙██████████████████████████████████████
    // ██████████████████████████████∙∙∙∙∙∙∙█████∙∙∙█∙████∙∙∙██████∙█████∙∙∙█∙∙∙∙∙∙∙███∙██∙█∙∙∙█∙██████████████████████████████████████
    // ██████████████████████████████∙∙∙∙∙∙∙████∙∙█∙∙█████∙∙∙██████∙∙███∙∙∙∙∙∙█∙∙∙∙∙███∙∙∙∙∙█∙█∙███████████████████████████████████████
    // ██████████████████████████████∙∙∙∙∙∙∙█████∙█∙∙█████∙∙███████∙███∙∙∙∙∙∙∙█∙∙∙∙██∙∙∙∙∙∙∙∙∙█∙███████████████████████████████████████
    // █████████████████████████████∙∙∙∙∙∙∙█████∙∙∙∙∙████∙∙∙██████∙∙███∙∙∙∙∙∙∙█∙∙∙██∙∙∙∙∙∙∙∙∙∙∙████████████████████████████████████████
    // █████████████████████████████∙∙∙∙∙∙∙∙████∙∙∙∙∙████∙∙███████∙████████∙∙∙∙█∙██∙∙∙∙∙∙∙∙∙∙∙∙∙███████████████████████████████████████
    // █████████████████████████████∙∙∙∙∙∙∙∙████∙∙∙∙∙∙███∙∙██████∙████∙∙█∙█∙∙∙∙∙∙█∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙██████████████████████████████████████
    // █████████████████████████████∙∙∙∙∙∙∙∙∙███∙∙∙∙∙███∙∙∙█████∙█████∙██∙██∙∙∙███∙∙∙∙∙∙∙∙∙████∙∙██████████████████████████████████████
    // █████████████████████████████∙∙∙∙∙∙∙∙∙∙██∙∙∙∙∙∙██∙∙█████∙████∙█∙∙█∙∙█∙∙∙███∙∙∙∙∙∙∙∙██████∙██████████████████████████████████████
    // █████████████████████████████∙∙∙∙∙∙∙∙∙∙∙███∙∙∙███∙∙██████████∙∙∙∙∙█∙█∙∙███∙█∙∙∙∙∙∙██∙██∙████████████████████████████████████████
    // █████████████████████████████∙∙∙∙∙∙∙∙∙∙∙∙∙███∙∙██∙∙███∙█████∙∙∙∙∙∙█∙████∙∙∙∙█∙∙∙∙∙████████∙█████████████████████████████████████
    // █████████████████████████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙██████∙██████████∙∙∙∙∙∙████∙∙∙∙∙∙∙∙█∙∙∙██████████████████████████████████████████████
    // █████████████████████████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙███∙∙██████████∙∙∙∙█████∙∙∙∙∙∙∙∙∙∙█████████████████████████████████████████████████
    // ██████████████████████████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙██████████████████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█████████∙█████████████████████████████████████
    // ███████████████████████████████∙∙∙∙∙∙∙∙∙∙∙∙█████████∙███████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙█████∙█████████████████████████████████████████
    // ██████████████████████████████∙█∙∙∙∙∙∙∙∙∙∙∙█████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙█████████∙█████████████████████████████████████
    // ███████████████████████████████∙█∙∙∙∙∙∙∙∙∙████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙███████████████████████████████████████████████
    // ███████████████████████████████∙∙█∙∙∙∙∙∙∙∙████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙█████████∙██████████████████████████████████████
    // ████████████████████████████████∙∙█∙∙∙∙∙∙████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙██∙∙██████∙██████████████████████████████████████
    // █████████████████████████████████∙∙██∙∙∙∙████████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙██∙∙∙∙∙█∙∙∙███████████████████████████████████████
    // ██████████████████████████████████∙∙∙█∙∙∙███████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙∙██████∙█∙██████████████████████████████████████████
    // ███████████████████████████████████∙∙∙███∙██████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙█∙∙████████████████████████████████████████████████████
    // ████████████████████████████████████∙∙∙∙███████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙█∙∙∙∙█████████████████████████████████████████████████████
    // ██████████████████████████████████████∙∙███████∙█∙∙∙∙∙∙∙∙∙∙█∙█∙██∙██∙∙∙∙∙███████████████████████████████████████████████████████
    // ███████████████████████████████████████∙████████∙█∙█∙█∙█∙█∙█∙█∙∙∙∙∙∙∙∙██████████████████████████████████████████████████████████
    // █████████████████████████████████████████∙█████∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙∙█∙████████████████████████████████████████████████████████████
    // ████████████████████████████████████████████████∙█∙∙∙∙∙∙∙∙∙∙█∙██████████████████████████████████████████████████████████████████
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf1, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xec, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xde, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xee, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x80, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x94, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xbf, 0x40, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x79, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x7d, 0xf8, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd8, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xce, 0xff, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xdf, 0xff, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x7f, 0xff, 0xfd, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xdf, 0x83, 0xf8, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x3c, 0x01, 0xf0, 0xc7, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0xf0, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x20, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x67, 0x98, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x0e, 0x0c, 0x27, 0x18, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x87, 0x30, 0x6e, 0x19, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x33, 0xf3, 0xa8, 0xae, 0x1d, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x67, 0xfb, 0x81, 0x2c, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xf0, 0xef, 0xfb, 0x00, 0x35, 0xe0, 0x3f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xe1, 0x8f, 0xfb, 0x00, 0x7d, 0xe0, 0x1f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xfc, 0x23, 0x8b, 0xc7, 0x80, 0x7d, 0xc0, 0x1f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xe0, 0x1f, 0x9b, 0x67, 0x03, 0xfd, 0xe0, 0x0f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xc0, 0x5b, 0x9c, 0xc7, 0x04, 0x07, 0xf5, 0x4f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0x80, 0xaf, 0x17, 0xc6, 0x08, 0x03, 0xe0, 0x4f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0x81, 0xff, 0x9f, 0x86, 0x10, 0x03, 0xe0, 0x5f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0x01, 0xdf, 0xaf, 0x0e, 0x20, 0x01, 0xc0, 0x5f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0x01, 0xff, 0xe0, 0x16, 0x60, 0x03, 0xc0, 0x3f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0x03, 0xf1, 0xe1, 0xfa, 0x40, 0x03, 0x80, 0x7f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0x55, 0xe1, 0xf3, 0xf7, 0xd0, 0x03, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfc, 0x07, 0xc5, 0xe3, 0xf7, 0xc4, 0x07, 0x68, 0xbf, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfc, 0x07, 0x93, 0xe3, 0xf3, 0x81, 0x07, 0x05, 0x7f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfc, 0x07, 0xd3, 0xe7, 0xf7, 0x01, 0x0c, 0x01, 0x7f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xf8, 0x0f, 0x83, 0xc7, 0xe7, 0x01, 0x18, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xf8, 0x07, 0x83, 0xcf, 0xef, 0xf0, 0xb0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xf8, 0x07, 0x81, 0xcf, 0xde, 0x50, 0x20, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xf8, 0x03, 0x83, 0x8f, 0xbe, 0xd8, 0xe0, 0x0f, 0x3f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xf8, 0x01, 0x81, 0x9f, 0x7a, 0x48, 0xe0, 0x1f, 0xbf, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xf8, 0x00, 0xe3, 0x9f, 0xf8, 0x29, 0xd0, 0x36, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xf8, 0x00, 0x39, 0x9d, 0xf0, 0x2f, 0x08, 0x3f, 0xdf, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xf8, 0x00, 0x1f, 0xbf, 0xf0, 0x3c, 0x02, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xf8, 0x00, 0x07, 0x3f, 0xf0, 0xf8, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfc, 0x00, 0x0f, 0xff, 0xff, 0xc0, 0x00, 0x7f, 0xdf, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfe, 0x00, 0x1f, 0xf7, 0xff, 0x00, 0x01, 0x7d, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfd, 0x00, 0x1f, 0xf0, 0x00, 0x00, 0x01, 0x7f, 0xdf, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfe, 0x80, 0x3f, 0xc0, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xfe, 0x40, 0x3f, 0xc0, 0x00, 0x00, 0x04, 0xff, 0xbf, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0x20, 0x7f, 0x80, 0x00, 0x00, 0x09, 0x9f, 0xbf, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0x98, 0x7f, 0x80, 0x00, 0x00, 0x13, 0x04, 0x7f, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xc4, 0x7f, 0x00, 0x00, 0x00, 0x27, 0xeb, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xe3, 0xbf, 0x00, 0x00, 0x01, 0x4f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xf0, 0xfe, 0x00, 0x00, 0x0a, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xfc, 0xfe, 0x80, 0x15, 0xb0, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xfe, 0xff, 0x55, 0x54, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xbe, 0x00, 0x00, 0x2f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x0b, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

// Select I2C BUS
void TCA9548A(uint8_t bus){
  Wire.beginTransmission(0x70);  // TCA9548A address
  Wire.write(1 << bus);          // send byte to select bus
  Wire.endTransmission();
  Serial.print(bus);
}
 
void initDisplay(int x) {
  TCA9548A(x);
  if(!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for(;;);
  } 
  // Clear the buffer
  display.clearDisplay();
}

void displayText(int x) {
  TCA9548A(x);
  display.clearDisplay();
  //display.setTextSize(8);
  display.setTextColor(WHITE);
  //display.setCursor(45, 10);
  // Display static text
  // display.println(x + 1);
  display.drawBitmap(0, 0, image_data_Image, 128, 64, 1);
  display.display(); 
}


void setup() {
  Serial.begin(115200);

  // Start I2C communication with the Multiplexer
  Wire.begin();

  initDisplay(0);
  initDisplay(1);
  initDisplay(2);
  initDisplay(3);
  initDisplay(4);
  initDisplay(5);
  initDisplay(6);
  initDisplay(7);

  
  displayText(0);
  displayText(1);
  displayText(2);
  displayText(3);
  displayText(4);
  displayText(5);
  displayText(6);
  displayText(7);
}
 
void loop() {
  
}